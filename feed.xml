<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robin's Personal Website</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 19 May 2017 18:35:14 +0800</pubDate>
    <lastBuildDate>Fri, 19 May 2017 18:35:14 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Docker -- 日志系统FKLEK</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#elk&quot; id=&quot;markdown-toc-elk&quot;&gt;ELK日志平台&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;现在我们有了docker swarm集群，上面跑了docker币应用，以后还会有更多的应用跑在集群上；&lt;/p&gt;

&lt;p&gt;如何监控每个应用的运行状态呢？&lt;/p&gt;

&lt;p&gt;所以我们需要一个日志平台用来收集分析展示所有的swarm集群上应用的日志;&lt;/p&gt;

&lt;h2 id=&quot;elk&quot;&gt;ELK日志平台&lt;/h2&gt;

&lt;p&gt;在本小节我们使用ELK日志平台，什么是ELK？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ElasticSearch：存储和索引日志&lt;/li&gt;
  &lt;li&gt;Logstash：接收，发送，过滤，分隔日志&lt;/li&gt;
  &lt;li&gt;Kibana：用来索引，展示，分析日志的UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们会在每个swarm节点上使用syslgo协议发送日志到logstash，存储在elasticsearch中；最后使用kibana分析展示日志。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Note: 后续补充&lt;/p&gt;

</description>
        <pubDate>Fri, 19 May 2017 00:00:00 +0800</pubDate>
        <link>/docker/Docker-FKLEK.html</link>
        <guid isPermaLink="true">/docker/Docker-FKLEK.html</guid>
        
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>Python抓取特定XML JSON HTML文件内容</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#xml&quot; id=&quot;markdown-toc-xml&quot;&gt;XML文件处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xml&quot;&gt;XML文件处理&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

from xml.parsers.expat import ParserCreate
from urllib import request

&lt;span class=&quot;c&quot;&gt;# 定义回调机制&lt;/span&gt;
class MovieHandler&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
   def __init__&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      self.CurrentData &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      self.type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      self.format &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      self.year &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      self.rating &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      self.stars &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      self.description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;# 元素开始事件处理&lt;/span&gt;
   def startElement&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self, tag, attributes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      self.CurrentData &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; tag
      &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;movie&quot;&lt;/span&gt;:
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*****Movie*****&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         title &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; attributes[&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Title:&quot;&lt;/span&gt;, title&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;# 元素结束事件处理&lt;/span&gt;
   def endElement&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self, tag&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;:
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type:&quot;&lt;/span&gt;, self.type&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;format&quot;&lt;/span&gt;:
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Format:&quot;&lt;/span&gt;, self.format&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt;:
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Year:&quot;&lt;/span&gt;, self.year&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rating&quot;&lt;/span&gt;:
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Rating:&quot;&lt;/span&gt;, self.rating&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stars&quot;&lt;/span&gt;:
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stars:&quot;&lt;/span&gt;, self.stars&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;:
         print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Description:&quot;&lt;/span&gt;, self.description&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      self.CurrentData &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;# 内容事件处理&lt;/span&gt;
   def characters&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self, content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;:
         self.type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; content
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;format&quot;&lt;/span&gt;:
         self.format &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; content
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt;:
         self.year &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; content
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rating&quot;&lt;/span&gt;:
         self.rating &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; content
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stars&quot;&lt;/span&gt;:
         self.stars &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; content
      &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;self.CurrentData &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;:
         self.description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; content

&lt;span class=&quot;c&quot;&gt;# 获取XML文件&lt;/span&gt;
with request.urlopen&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://wangrubin.com/testfile/movies.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; as f:
        xml &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; f.read&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

handler &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; MovieHandler&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ParserCreate&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重写原有的StartElementHandler EndElementHandler CharacterDataHandler&lt;/span&gt;
parser.StartElementHandler &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; handler.startElement
parser.EndElementHandler &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; handler.endElement
parser.CharacterDataHandler &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; handler.characters

parser.Parse&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;xml&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0800</pubDate>
        <link>/python/python-web.html</link>
        <guid isPermaLink="true">/python/python-web.html</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Learning to think in English</title>
        <description>&lt;h2 id=&quot;do-you-think-in-english&quot;&gt;Do you think in English?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Article by: Simon Buckland, WSE International&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example, when someone asks you a question in English, do you immediately think to yourself in English “Mmmh, how shall i answer this question?” Or do you mentally translate the question into your own language, find an answer in your own language, and then mentally translate the answer into English before speaking?&lt;/p&gt;

&lt;p&gt;It took me quite a long time to write that question - and it will take you quite a long time to do it. if you look at the picture, you'll see exactly what happens when you go “the long way around 'instead of the direct route'”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/English/1.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I'v used  Chinese as an example, Because Chinese people do often translate mentally into Chinese before speaking in English. and to make it look really complicated for people who can't read Chinese!&lt;/p&gt;

&lt;p&gt;Here are some things for you to notice:&lt;/p&gt;

&lt;p&gt;There are five steps, compared with only one step if you think in english. Obviously, this is going to take time.&lt;/p&gt;

&lt;p&gt;When you translate into your own language you might make a mistake, or you might not find anything which is exactly like what you heard in English.&lt;/p&gt;

&lt;p&gt;Then, when you come up with the answer in your own language it may be something that you don't know how to say in English.&lt;/p&gt;

&lt;p&gt;With all these steps, you'll take even more time to think the right answer. Meanwhile the other person is sitting or standing there waiting for you to speak, Or maybe they're not even waiting anymore - maybe they've got bored with waiting, and they're already gone away!&lt;/p&gt;

&lt;p&gt;So i think it's obvious that you need to start thinking in English as soon as possible. The next question is: how long do you need to study English before you start thinking in English? Six months? One year? Two years? Ten years?&lt;/p&gt;

&lt;p&gt;The answer may surprise you: you can start thinking in English right from the beginning, even if you started studying only a coupleof weeks ago. How is this possible? The answer depends on understanding one or two things about how the brain works.&lt;/p&gt;

&lt;p&gt;There is an area in the human brain called, Wernicks's Area, witch is generallyassociatede with processing and understanding language. This area of brain is right next to the parts of the brain associated with visual images and memory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/English/2.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a look at this picture - which world do you first look at? Of course, it's the world in your own language - excuse me if yours is missing. Because the brain links the picture of the dog with the word 'dog' in your native language. But it is possible to use this aspect of the brain to help you think in English - by thinking of a picture in English, or related to English. When you speak English.&lt;/p&gt;

&lt;p&gt;Think about speaking English for a moment - What pictures come into your mind? Maybe it's famous places in English-speaking countries like Towe Bridge in London or the Statue of Liberty in New York. Or maybe the picture that comes into your mind is your local Wall Street Center - or a teacher or a Personal Tutor. It doesn't matter - if you try to keep these images in your mind when you speak, it will help you to think in English. Try it and see.&lt;/p&gt;

&lt;p&gt;And here's another idea for you to try, But first a question: Have you ever seen someone walking down the street, Talking to himself? Probably you thought 'poor man'; 'He's sick'; 'He needs to be in the hospital' - or something like that.&lt;/p&gt;

&lt;p&gt;Well, if people like that are crazy. so are most of us: we almost all talk to ourselves. The only difference is that us 'normal' people don't talk to ourselves out loud; we just do it inside our own heads, where no one can hear us.&lt;/p&gt;

&lt;p&gt;So when you 'talk to yourself', What language do you do it in? Obviously, in your own language, So why not try talking to yourself in English, Ask yourself some simple questions like: “How are you today?” or “Did you have a nice weekend?” or perhaps, if you're thinking about some decision in your life, talk about that in English - “So shall i take that job? will i be happy there?” or “Do i really like Maria? I think so, Maybe i'll ask her to go out to dinner with me” etc.etc.&lt;/p&gt;

&lt;p&gt;See how long you can keep up this 'mental conversation' in English: five minutes? Ten? Half an hour? more? You'll be surprised how much it will help you if you can talk yourself in English. After all, when you talk to yourself you know someone islistening!&lt;/p&gt;

&lt;p&gt;And when you're alone - but not when you are on the street or a train - try speaking out loud too. That will help you confidence in speaking as well.&lt;/p&gt;

&lt;p&gt;So, what do you think about this. Do you often think in English? What is it like for you? Please post your thoughts and experiences here - and thanks for reading.&lt;/p&gt;

</description>
        <pubDate>Tue, 18 Apr 2017 00:00:00 +0800</pubDate>
        <link>/point/Learning-to-think-in-English.html</link>
        <guid isPermaLink="true">/point/Learning-to-think-in-English.html</guid>
        
        
        <category>Point</category>
        
      </item>
    
      <item>
        <title>LVS 四层负载均衡</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lvs&quot; id=&quot;markdown-toc-lvs&quot;&gt;LVS工作模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lvs-1&quot; id=&quot;markdown-toc-lvs-1&quot;&gt;LVS工作原理&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#nat&quot; id=&quot;markdown-toc-nat&quot;&gt;NAT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dr&quot; id=&quot;markdown-toc-dr&quot;&gt;DR&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tun&quot; id=&quot;markdown-toc-tun&quot;&gt;TUN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fullnat&quot; id=&quot;markdown-toc-fullnat&quot;&gt;FULLNAT&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;需求&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;前提&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;模拟测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;Linux虚拟服务器（Linux Virtual Server）&lt;/p&gt;

&lt;p&gt;我们使用该软件配置LVS时候，不能直接配置内核中的ipvs，而需要使用ipvs的管理工具ipvsadm进行管理；或者使用keepalived管理。&lt;/p&gt;

&lt;p&gt;LVS集群负载均衡器接受服务的所有入站客户端计算机请求，并根据调度算法决定哪个集群节点应该处理回复请求。负载均衡器(简称LB)有时也被称为LVS Director(简称Director)。&lt;/p&gt;

&lt;h2 id=&quot;lvs&quot;&gt;LVS工作模式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;NAT（Network Address Translation）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DR（Direct Routing）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TUN（IP Tunneling）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FULLNAT（Full Network Address Translation）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lvs-1&quot;&gt;LVS工作原理&lt;/h2&gt;

&lt;h3 id=&quot;nat&quot;&gt;NAT&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;NAT技术将请求的报文（通过DNAT方式改写）和响应的报文（通过SNAT方式改写），通过调度器地址重写然后在转发给内部的服务器，报文返回时改写成原来的用户请求的地址。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只需要在调度器LB上配置WAN公网IP即可，调度器也要有私有LAN IP和内部RS节点通信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每台内部RS节点的网关地址，必须要配成调度器LB的私有LAN内物理网卡地址（LDIP），这样才能确保数据报文返回时仍然经过调度器LB。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于请求与响应的数据报文都经过调度器LB，因此，网站访问量大时调度器LB有较大瓶颈，一般要求最多10-20台节点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NAT模式支持对IP及端口的转换，即用户请求10.0.1.1:80，可以通过调度器转换到RS节点的10.0.1.2:8080（DR和TUN模式不具备的）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有NAT内部RS节点只需配置私有LAN IP即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于数据包来回都需要经过调度器，因此，要开启内核转发net.ipv4.ip_forward = 1，当然也包括iptables防火墙的forward功能（DR和TUN模式不需要）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;dr&quot;&gt;DR&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;通过在调度器LB上修改数据包的目的MAC地址实现转发。注意，源IP地址仍然是CIP，目的IP地址仍然是VIP。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;请求的报文经过调度器，而RS响应处理后的报文无需经过调度器LB，因此，并发访问量大时使用效率很高（和NAT模式比）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因DR模式是通过MAC地址的改写机制实现的转发，因此，所有RS节点和调度器LB只能在一个局域网LAN中（小缺点）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要注意RS节点的VIP的绑定（lo:vip/32,lo1:vip/32）和ARP抑制问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RS节点的默认网关不需要是调度器LB的DIP，而直接是IDC机房分配的上级路由器的IP（这是RS带有外网IP地址的情况），理论讲：只要RS可以出网即可，不是必须要配置外网IP。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于DR模式的调度器仅进行了目的MAC地址的改写，因此，调度器LB无法改变请求的报文的目的端口（和NAT要区别）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;总的来说DR模式效率很高，但是配置也较麻烦，因此，访问量不是特别大的公司可以用haproxy/nginx取代之。这符合运维的原则：简单、易用、高效。日1000-2000W PV或并发请求1万以下都可以考虑用haproxy/nginx（LVS NAT模式）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;直接对外的访问业务，例如：web服务做RS节点，RS最好用公网IP地址。如果不直接对外的业务，例如：MySQL,存储系统RS节点，最好只用内部IP地址。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tun&quot;&gt;TUN&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;负载均衡器通过把请求的报文通过IP隧道（ipip隧道，高级班讲这个）的方式（请求的报文不经过原目的地址的改写(包括MAC)，而是直接封装成另外的IP报文）转发至真实服务器，而真实服务器将响应处理后直接返回给客户端用户。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于真实服务器将响应处理后的报文直接返回给客户端用户，因此，最好RS有一个外网IP地址，这样效率才会更高。理论上：只要能出网即可，无需外网IP地址。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于调度器LB只处理入站请求的报文。因此，此集群系统的吞吐量可以提高10倍以上，但隧道模式也会带来一定的系统开销。TUN模式适合LAN/WAN。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TUN模式的LAN环境转发不如DR模式效率高，而且还要考虑系统对IP隧道的支持问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有的RS服务器都要绑定VIP，抑制ARP，配置复杂。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LAN环境一般多采用DR模式，WAN环境可以用TUN模式，但是当前在WAN环境下，请求转发更多的被haproxy/nginx/DNS调度等代理取代。因此，TUN模式在国内公司实际应用的已经很少。跨机房应用要么拉光纤成局域网，要么DNS调度，底层数据还得同步。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;直接对外的访问业务，例如：web服务做RS节点，最好用公网IP地址。不直接对外的业务，例如：MySQL,存储系统RS节点，最好用内部IP地址。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fullnat&quot;&gt;FULLNAT&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;数据包经过LVS时；同时更改DIP+PORT 和 SIP+PORT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;需求&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用lvs实现 client访问公网IPA+prot 映射到内网的real server的IPB+port上&lt;/li&gt;
  &lt;li&gt;Real server 可以看到client的公网IP地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LVS本是用来做负载均衡，但在单real server节点的时候，相当于实现了NAT功能&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;前提&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;lvs有一个内网IP 和 后端real server在同一网段&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;后端的real server 需要将网关指向lvs的内网IP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;lvs上配置了公网VIP用户可以访问到。（即路由可达）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;模拟测试&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;安装LVS&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;modprobe ip_vs
yum install ipvsadm -y	&lt;span class=&quot;c&quot;&gt;#安装IPVS的管理模块，真正实现负载的是工作在内核空间的IPVS&lt;/span&gt;
lsmod |grep ip_vs	&lt;span class=&quot;c&quot;&gt;#有输出则代表内核支持lvs，基本都支持lvs&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ulimit&lt;/span&gt; -n 65535
sed -i &lt;span class=&quot;s1&quot;&gt;'s#net.ipv4.ip_forward = 0#net.ipv4.ip_forward = 1#g'&lt;/span&gt; /etc/sysctl.conf		&lt;span class=&quot;c&quot;&gt;#开启内核转发&lt;/span&gt;
sysctl -p	&lt;span class=&quot;c&quot;&gt;#使配置生效&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;配置转发策略&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ipvsadm -C		&lt;span class=&quot;c&quot;&gt;#清空所有规则&lt;/span&gt;
ipvsadm -A -t 128.24.170.256:7000 -s rr		&lt;span class=&quot;c&quot;&gt;#添加VIP+PORT 负载策略：轮询&lt;/span&gt;
ipvsadm -a -t 128.24.170.256:7000  -r 192.168.1.12:7000 -m	&lt;span class=&quot;c&quot;&gt;#VIP+PORT ----&amp;gt; RIP+PORT 负载模式：NAT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;保存配置&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;service ipvsadm save&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;开机启动&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;chkconfig ipvsadm on&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;重启&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;service ipvsadm restart
/etc/init.d/ipvsadm restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;end&lt;/p&gt;

</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0800</pubDate>
        <link>/network/LVS-NAT.html</link>
        <guid isPermaLink="true">/network/LVS-NAT.html</guid>
        
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>Iptables和HAproxy实现端口转发</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;需求：&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;问题：&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;解决方案：&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;模拟测试：&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iptables&quot; id=&quot;markdown-toc-iptables&quot;&gt;Iptables&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;压力测试&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#haproxy&quot; id=&quot;markdown-toc-haproxy&quot;&gt;HAproxy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;推测结论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;需求：&lt;/h2&gt;

&lt;p&gt;client访问公网IP-A+prot 映射到公网IP-B+port&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;问题：&lt;/h2&gt;

&lt;p&gt;client访问的是A 数据包经过A之后目的变成B B收到数据包处理完毕回包，由于B会将数据包直接回向client；注意：client一开始访问的是A，回包的是B，所以三次握手都无法建立成功。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解决方案：&lt;/h2&gt;

&lt;p&gt;避免公网B直接给真实client回包；所以除了做DNAT外还需做SNAT&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;模拟测试：&lt;/h2&gt;

&lt;p&gt;访问192.168.1.11:8080 —»202.205.184.149:80（中国教育网IP）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方案一：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;192.168.1.11上配置iptables 做SNAT+DNAT&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方案二：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;192.168.1.11上配置haproxy实现TCP层反向代理负载均衡（单个realserver节点其实就是变相的SNAT+DNAT）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方案三：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;192.168.1.11上配置LVS的Full NAT模式(SNAT+DNAT)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方案四：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;192.168.1.11上配置nginx的4层转发(SNAT+DNAT)&lt;/p&gt;

&lt;h2 id=&quot;iptables&quot;&gt;Iptables&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;开启路由转发，关闭系统sys防护（以便后面进行压测）&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;ulimit&lt;/span&gt; -n 65535
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &amp;gt; /proc/sys/net/ipv4/ip_forward
sed -i &lt;span class=&quot;s1&quot;&gt;'s#net.ipv4.ip_forward = 0#net.ipv4.ip_forward = 1#g'&lt;/span&gt; /etc/sysctl.conf
sed -i &lt;span class=&quot;s1&quot;&gt;'s#net.ipv4.tcp_syncookies = 1#net.ipv4.tcp_syncookies = 0#g'&lt;/span&gt; /etc/sysctl.conf
modprobe ip_tables
modprobe iptable_filter
modprobe iptable_nat
modprobe ip_conntrack
modprobe ip_conntrack_ftp
modprobe ip_nat_ftp
modprobe ipt_state
sysctl -p&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;/etc/init.d/iptables start
iptables -F
iptables -X
iptables -t nat -A PREROUTING -d 192.168.1.11 -p tcp --dport 8888 -j DNAT --to-destination 202.205.184.149:80
iptables -t nat -A POSTROUTING -d 202.205.184.149/32 -o eth0 -j SNAT --to-source 192.168.1.11
iptables-save &amp;gt;/etc/sysconfig/iptables
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/init.d/iptables start&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/rc.local&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/pic/iptables-HAproxy/jiaoyu.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;压力测试&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;sed -i ‘s#net.ipv4.tcp_syncookies = 1#net.ipv4.tcp_syncookies = 0#g’ /etc/sysctl.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;压测服务器 iptables 应用服务器都要关闭此选项才能进行高并发测试；否则报错：apr_socket_recv: Connection reset by peer (104)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了排除网络因素 因此我们不夸互联网进行测试&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;ulimit&lt;/span&gt; -n 65535
iptables -t nat -A PREROUTING -d 192.168.1.11 -p tcp --dport 8888 -j DNAT --to-destination 192.168.1.100:80
iptables -t nat -A POSTROUTING -d 192.168.1.100/32 -o eth0 -j SNAT --to-source 192.168.1.11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.100是我搭建的nginx web服务 提供了一个静态页面&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装压力测试工具并且开始压测&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yum install httpd-tools -y
ab -n 100000 -c 10000 http://192.168.1.11:8888/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/pic/iptables-HAproxy/iptables01.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/iptables-HAproxy/iptables02.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;haproxy&quot;&gt;HAproxy&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.5.tar.gz
tar xf haproxy-1.7.5.tar.gz 
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;haproxy-1.7.5
uname -r
make &lt;span class=&quot;nv&quot;&gt;TARGET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux26 &lt;span class=&quot;nv&quot;&gt;PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/haproxy
make install &lt;span class=&quot;nv&quot;&gt;PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/haproxy
mkdir /etc/haproxy/conf -p&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cat &amp;gt;&amp;gt; /etc/haproxy/conf/haproxy.cfg &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt;EOF
global  
        daemon  
        nbproc 10  
        pidfile /var/run/haproxy.pid  
defaults  
        mode tcp               #默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK  
        retries 2               #两次连接失败就认为是服务器不可用，也可以通过后面设置  
        option abortonclose     #当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接  
        maxconn 65535            #默认的最大连接数  
        timeout connect 5000ms  #连接超时  
        timeout client 30000ms  #客户端超时  
        timeout server 10000ms  #服务器超时  
        log 127.0.0.1 local0 err #[err warning info debug]  
listen test1  
        bind 0.0.0.0:8888  
        mode tcp  
        server s1 192.168.1.100:80
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/conf/haproxy.cfg &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/pic/iptables-HAproxy/ha01.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/iptables-HAproxy/ha02.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;推测结论&lt;/h2&gt;

&lt;p&gt;HAproxy用来当做NAT设备使用，在高并发场景会消耗大量CPU计算资源，性能远不如iptables&lt;/p&gt;

&lt;p&gt;Iptables做NAT设备使用几乎不消耗CPU和内存资源。&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Apr 2017 00:00:00 +0800</pubDate>
        <link>/network/Iptables-Haproxy.html</link>
        <guid isPermaLink="true">/network/Iptables-Haproxy.html</guid>
        
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>Nginx-proxy_pass理解</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;需求&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nginx&quot; id=&quot;markdown-toc-nginx&quot;&gt;nginx配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;我以为&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;事实是&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;拿数据说话&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;需求&lt;/h2&gt;

&lt;p&gt;用户访问：www.wangrubin.com/weixin/front/123.ttf 这个文件;&lt;/p&gt;

&lt;p&gt;www.wangrubin.com被解析到了nginx上;&lt;/p&gt;

&lt;p&gt;nginx需要到www.123.com/uploadServer/fonts/123.ttf 取到132.ttf这个文件返回给用户。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;问题&lt;/h2&gt;

&lt;p&gt;www.123.com 做了防盗链配置，http-header中的host字段必须是自己的域名才会接受访问；&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;nginx配置&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;location /weixin/front/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                proxy_pass http:///www.123.com/uploadServer/fonts/;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-2&quot;&gt;我以为&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;当用户浏览器访问www.wangrubin.com/weixin/front/123.ttf&lt;/li&gt;
  &lt;li&gt;流量到nginx上，命中location /weixin/front/&lt;/li&gt;
  &lt;li&gt;nginx代替用户去访问http:///www.123.com/uploadServer/fonts/123.ttf&lt;/li&gt;
  &lt;li&gt;www.123.com这台主机看到的请求host是www.123.com；因为nginx完全自主的发起了新的连接&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;事实是&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;当用户浏览器访问www.wangrubin.com/weixin/front/123.ttf&lt;/li&gt;
  &lt;li&gt;流量到nginx上，命中location /weixin/front/&lt;/li&gt;
  &lt;li&gt;nginx代替用户去访问http:///www.123.com/uploadServer/fonts/123.ttf&lt;/li&gt;
  &lt;li&gt;www.123.com这台主机看到的请求host是www.wangrubin.com，不匹配本机server字段，不处理&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-4&quot;&gt;解决方案&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;location /weixin/front/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		proxy_set_header Host www.wangrubin.com;
                proxy_pass http:///www.123.com/uploadServer/fonts/;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;proxy_pass代理到upstream 需要添加proxy_set_header Host字段很容易理解，因为upstream中配置的IP地址，所以需要传递Host值，但是proxy_pass 代理到一个域名，我本以为是nginx自身为客户端去访问http://www.123.com/uploadServer/fonts/123.ttf，这是按照道理说Host字段应该是www.123.com，然而却不是这样的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;猜测：nginx在reload配置时会将域名解析成IP地址，保存到内存中，这样在高并发访问场景中，无需进行耗时的DNS解析。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-5&quot;&gt;拿数据说话&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;没有手动传Host参数&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/nginx-proxx_pass/1490778110.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;手动传Host参数&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/nginx-proxx_pass/20170329170247.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;end&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Mar 2017 00:00:00 +0800</pubDate>
        <link>/nginx/Nginx-Upstream.html</link>
        <guid isPermaLink="true">/nginx/Nginx-Upstream.html</guid>
        
        
        <category>Nginx</category>
        
      </item>
    
      <item>
        <title>dmidecode</title>
        <description>&lt;h3 id=&quot;bios&quot;&gt;查看BIOS信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;查看系统信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;u&quot;&gt;查看服务器u数电源数&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cpu&quot;&gt;查看cpu信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 4 |grep Version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;查看服务器物理接口信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;查看最大支持内存&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 16&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-3&quot;&gt;查看内存详细信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 17&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;查看服务器电源信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dmidecode -t 39&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0800</pubDate>
        <link>/command/dmidecode.html</link>
        <guid isPermaLink="true">/command/dmidecode.html</guid>
        
        
        <category>Command</category>
        
      </item>
    
      <item>
        <title>递归算法--HanoiTower</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;起源&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;抽象成数学问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;归纳法求解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;归纳总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;递归算法分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;调用方法的栈机制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pythond&quot; id=&quot;markdown-toc-pythond&quot;&gt;Pythond代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;起源&lt;/h2&gt;

&lt;p&gt;汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。&lt;/p&gt;

&lt;p&gt;大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。&lt;/p&gt;

&lt;p&gt;大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。&lt;/p&gt;

&lt;p&gt;并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;抽象成数学问题&lt;/h2&gt;

&lt;p&gt;如下图所示，从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去.&lt;/p&gt;

&lt;p&gt;期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/python/HanoiTower/1026866-20161016022859889-2055402664.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;归纳法求解&lt;/h2&gt;

&lt;p&gt;n = 1&lt;/p&gt;

&lt;p&gt;第1次  1号盘  A —-&amp;gt;C&lt;/p&gt;

&lt;p&gt;n = 2&lt;/p&gt;

&lt;p&gt;第1次  1号盘  A—-&amp;gt;B&lt;/p&gt;

&lt;p&gt;第2次  2号盘  A—-&amp;gt;C&lt;/p&gt;

&lt;p&gt;第3次  1号盘  B—-&amp;gt;C&lt;/p&gt;

&lt;p&gt;n = 3&lt;/p&gt;

&lt;p&gt;第1次  1号盘  A—-&amp;gt;C&lt;/p&gt;

&lt;p&gt;第2次  2号盘  A—-&amp;gt;B&lt;/p&gt;

&lt;p&gt;第3次  1号盘  C—-&amp;gt;B&lt;/p&gt;

&lt;p&gt;第4次  3号盘  A—-&amp;gt;C&lt;/p&gt;

&lt;p&gt;第5次  1号盘  B—-&amp;gt;A&lt;/p&gt;

&lt;p&gt;第6次  2号盘  B—-&amp;gt;C&lt;/p&gt;

&lt;p&gt;第7次  1号盘  A—-&amp;gt;C&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;归纳总结&lt;/h2&gt;

&lt;p&gt;1个圆盘的次数 2的1次方减1&lt;/p&gt;

&lt;p&gt;2个圆盘的次数 2的2次方减1&lt;/p&gt;

&lt;p&gt;3个圆盘的次数 2的3次方减1&lt;/p&gt;

&lt;p&gt;n个圆盘的次数 2的n次方减1&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;递归算法分析&lt;/h2&gt;

&lt;p&gt;我们在利用计算机求汉诺塔问题时，必不可少的一步是对整个实现求解进行算法分析。到目前为止，求解汉诺塔问题最简单的算法还是同过递归来求，至于是什么是递归，递归实现的机制是什么，我们说的简单点就是自己是一个方法或者说是函数，但是在自己这个函数里有调用自己这个函数的语句，而这个调用怎么才能调用结束呢？这里还必须有一个结束点，或者具体的说是在调用到某一次后函数能返回一个确定的值，接着倒数第二个就能返回一个确定的值，一直到第一次调用的这个函数能返回一个确定的值。&lt;/p&gt;

&lt;p&gt;实现这个算法可以简单分为三个步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;把n-1个盘子由 A 移到 B；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把第n个盘子由 A 移到 C；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把n-1个盘子由 B 移到 C；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从这里入手，在加上上面数学问题解法的分析，我们不难发现，移到的步数必定为奇数步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;中间的一步是把最大的一个盘子由A移到C上去；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中间一步之上可以看成把A上n-1个盘子通过借助辅助塔（C塔）移到了B上，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中间一步之下可以看成把B上n-1个盘子通过借助辅助塔（A塔）移到了C上；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;调用方法的栈机制&lt;/h2&gt;

&lt;p&gt;特点：先进后出&lt;/p&gt;

&lt;p&gt;从主线程开始调用方法（函数）进行不停的压栈和出栈操作，函数的调用就是将函数压如栈中，函数的结束就是函数出栈的过程，这样就保证了方法调用的顺序流，即当函数出现多层嵌套时，需要从外到内一层层把函数压入栈中，最后栈顶的函数先执行结束（最内层的函数先执行结束）后出栈，再倒数第二层的函数执行结束出栈，到最后，第一个进栈的函数调用结束后从栈中弹出回到主线程，并且结束。&lt;/p&gt;

&lt;h2 id=&quot;pythond&quot;&gt;Pythond代码&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;def HanoiTower&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n,source,Buffer,destination&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;n &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1:
        print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;'------&amp;gt;'&lt;/span&gt;,destination&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return
    &lt;/span&gt;HanoiTower&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n-1,source,destination,Buffer&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    HanoiTower&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,source,Buffer,destination&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    HanoiTower&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n-1,Buffer,source,destination&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
HanoiTower&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4,&lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;A ------&amp;gt; B
A ------&amp;gt; C
B ------&amp;gt; C
A ------&amp;gt; B
C ------&amp;gt; A
C ------&amp;gt; B
A ------&amp;gt; B
A ------&amp;gt; C
B ------&amp;gt; C
B ------&amp;gt; A
C ------&amp;gt; A
B ------&amp;gt; C
A ------&amp;gt; B
A ------&amp;gt; C
B ------&amp;gt; C&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;end&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
        <link>/python/HanoiTower.html</link>
        <guid isPermaLink="true">/python/HanoiTower.html</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Tcpdump</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;二层抓包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;三层抓包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;四层抓包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;常用抓包示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;二层抓包&lt;/h2&gt;

&lt;p&gt;抓源MAC地址为 00:0C:29:37:77:1D 的数据帧&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn ether src 00:0C:29:37:77:1D&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓目的MAC地址为 00:0C:29:37:77:1D 的数据帧&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn ether dst 00:0C:29:37:77:1D&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓源MAC地址或者目的MAC为 00:0C:29:37:77:1D 的数据帧&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn ether host 00:0C:29:37:77:1D&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取以太网广播流量&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn ether broadcast&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取以太网多播流量&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn multicast&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取与定义的protocol协议相同的数据帧&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn ether proto 0800&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据vlan-id抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn vlan vlan 10 and vlan 20 and vlan 30&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓与定义的MAC的地址不相同的数据帧&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn ! ether host 00:0C:29:37:77:1D&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;三层Pv4广播流量，目的ip为192.168.1.255（C类广播地址）对应的二层以太网帧MAC地址为ff:ff:ff:ff:ff:ff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARP目的MAC为ff:ff:ff:ff:ff:ff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;但凡IPv4多播流量，以太网帧目的MAC以01:00:5e开头，以01:00:5e开头的目的MAC地址都被视为以太网多播帧&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;但凡IPv6多播流量，以太网帧目的MAC以33:33开头，以33:33打头的目的MAC地址都被视为以太网多播帧&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;以太网类型是指以太网帧帧头的ETHER-TYPE字段，用来表示以太网帧帧头所封装的高层协议流量的协议类型。0x0800 0x86dd 0x0806 分别表示IPv4 IPv6 以及ARP流量&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;三层抓包&lt;/h2&gt;

&lt;p&gt;根据目的IP地址抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn dst host 114.114.114.114&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据源IP地址抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn src host 114.114.114.114&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据指定IP地址抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn host 114.114.114.114&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据源网段抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn src net 192.168.1.0/24&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据目的网段抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn dst net 192.168.1.0/24&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据网段抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn net 192.168.1.0/24&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取ICMP流量&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn ip proto 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取ICMP request的报文&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn icmp [icmptype]==icmp-echo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn icmp[icmptype]==8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取ICMP reply的报文&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn icmp [icmptype]==icmp-echoreply&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取ICMP流量但PING包除外&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn icmp [icmptype] != icmp-echo and icmp [icmptype] !=icmp-echoreply&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;四层抓包&lt;/h2&gt;

&lt;p&gt;根据源端口抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn src port 22&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据目的端口抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn dst port 22&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据端口号抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn port 22&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据源端口范围抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn tcp src portrange 1-1024&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据目的端口范围抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn tcp dst portrange 1-1024&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据端口范围抓包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn tcp portrange 1-1024&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取tcp连接中SYN为1或FIN为1的数据包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn “tcp [tcpflags] &amp;amp; (tcp-syn | tcp-fin) !=0”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;抓取所有RST为1的tcp包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nn  “tcp [tcpflags] &amp;amp; (tcp-rst) !=0”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SYN //建立连接&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FIN //拆除连接&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ACK //确认连接&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RST //立刻拆除连接&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PSH //将数据提交给后端应用程序处理&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tcp[13] &amp;amp; 0x00 =0 //抓取所有标记位都置为1的tcp流量&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tcp[13] &amp;amp; 0x01 =1 //抓取FIN位为1，ACK为0的TCP流量&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tcp[13] &amp;amp; 0x03 =3 //抓取FIN和FIN位同时置为1的TCP流量&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tcp[13] &amp;amp; 0x05 =5 //抓取RST和FIN位同时置为1的TCP流量&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tcp[13] &amp;amp; 0x06 =6 //抓取SYN和RST位同时置为1的TCP流量&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tcp[13] &amp;amp; 0x08 =8 //抓取PSH位置为1，但ACK为0的TCP流量&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;常用抓包示例&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;tcpdump -i eth0 -nnv host www.baidu.com -c 1000 -w /home/baidu.cap&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;end&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Feb 2017 00:00:00 +0800</pubDate>
        <link>/command/Tcpdump.html</link>
        <guid isPermaLink="true">/command/Tcpdump.html</guid>
        
        
        <category>Command</category>
        
      </item>
    
      <item>
        <title>shell循环语句</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#if&quot; id=&quot;markdown-toc-if&quot;&gt;IF循环&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;生产脚本示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#for&quot; id=&quot;markdown-toc-for&quot;&gt;FOR循环&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;生产脚本示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#while&quot; id=&quot;markdown-toc-while&quot;&gt;WHILE循环&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;生产脚本示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#case&quot; id=&quot;markdown-toc-case&quot;&gt;CASE语句&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;生产脚本示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;函数&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;生产脚本示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;数组&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if&quot;&gt;IF循环&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/hosts &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ture&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fail&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/hosts &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/hosts is ture&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/sysconfig/network-scripts/ifcfg-eth0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ifcfg-eth0 is ture&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;all fail&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section&quot;&gt;生产脚本示例&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;STATUS_CODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -I --connect-timeout 10 -o /dev/null -s -w %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;http_code&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; wangrubin.com&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STATUS_CODE&lt;/span&gt; -eq 200 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nginx is Ok&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nginx is Fail&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;for&quot;&gt;FOR循环&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;n &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 10&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&amp;lt;&lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;;i+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;生产脚本示例&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Author: wangrubin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Email: robinwangrubin@gmail.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Description: This script is for test&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test.ShowSeatCacheException&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FILEPATHS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/test_20*/logs/catalina.out&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TATAL_NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;DATE_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%F %H:%M&quot;&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&quot;1 minute ago&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;FILE &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILEPATHS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;do
          &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;grep &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATE_TIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; |grep &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ERROR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; |wc -l&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;TATAL_NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;TATAL_NUM+NUM&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TATAL_NUM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;n &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..255&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
 &lt;/span&gt;ping -c 2 -W 2 10.0.0.&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt; &amp;amp;&amp;gt;/dev/null
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.0.0.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is active&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.0.0.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is shutdown&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;fi
done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;while&quot;&gt;WHILE循环&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$int&lt;/span&gt;&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;123
  &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;int+1
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;123
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; :
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;123
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;生产脚本示例&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; /etc/passwd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;case&quot;&gt;CASE语句&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -t 5 -p &lt;span class=&quot;s2&quot;&gt;&quot;Pls input a number less 10: &quot;&lt;/span&gt; n
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The num you put is 1&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
2&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The num you put is 2&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3-9]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The num you put is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The num you put must be a number and the volue must be less 9&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-3&quot;&gt;生产脚本示例&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#chkconfig:2345 54 65&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#description: Stop/Start/Reload Nginx scripts&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
. /etc/init.d/functions
&lt;span class=&quot;nv&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/application/nginx/sbin/nginx&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx&quot;&lt;/span&gt;
start&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /var/lock/subsys/&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nginx is runing&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;    
    &lt;span class=&quot;nv&quot;&gt;$nginx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RETVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
       &lt;/span&gt;touch /var/lock/subsys/&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;
       action &lt;span class=&quot;s2&quot;&gt;&quot;Starting nginx&quot;&lt;/span&gt; /bin/true
    &lt;span class=&quot;k&quot;&gt;else
       &lt;/span&gt;action &lt;span class=&quot;s2&quot;&gt;&quot;Starting nginx&quot;&lt;/span&gt; /bin/false
    &lt;span class=&quot;k&quot;&gt;fi
    return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
stop&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f /var/lock/subsys/&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
       &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nginx is stopped&quot;&lt;/span&gt;      
       &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0 
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$nginx&lt;/span&gt; -s stop &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RETVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
       &lt;/span&gt;rm -f /var/lock/subsys/&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;
       action &lt;span class=&quot;s2&quot;&gt;&quot;Stopping nginx&quot;&lt;/span&gt; /bin/true
    &lt;span class=&quot;k&quot;&gt;else
       &lt;/span&gt;action &lt;span class=&quot;s2&quot;&gt;&quot;Stopping nginx&quot;&lt;/span&gt; /bin/false
    &lt;span class=&quot;k&quot;&gt;fi
    return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
reload&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$nginx&lt;/span&gt; -s reload &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RETVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
       &lt;/span&gt;action &lt;span class=&quot;s2&quot;&gt;&quot;Reloading nginx&quot;&lt;/span&gt; /bin/true
    &lt;span class=&quot;k&quot;&gt;else
       &lt;/span&gt;action &lt;span class=&quot;s2&quot;&gt;&quot;Reloading nginx&quot;&lt;/span&gt; /bin/false
    &lt;span class=&quot;k&quot;&gt;fi
    return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ACTION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        start
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        stop
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    restart&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        stop
        start
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    reload&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        reload
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pls choose start|stop|restart|reload&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cp nginx.sh /etc/init.d/nginx
chmod +x /etc/init.d/nginx
chkconfig --add /etc/init.d/nginx
chkconfig nginx on
chkconfig --list nginx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;函数&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;Fist_Function&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is my first function&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

Fist_Function&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-5&quot;&gt;生产脚本示例&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Author: wangrubin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Email: robinwangrubin@gmail.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Description: This script is for test&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;CHECK_URL&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;STATUS_CODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -I --connect-timeout 10 -o /dev/null -s -w %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;http_code&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$STATUS_CODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -eq 200 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is Ok&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is False&quot;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;-ne 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; Pls input a URL;For example http://www.baidu.com &quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;CHECK_URL &lt;span class=&quot;nv&quot;&gt;$URL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;break n：n表示跳出循环的层数，省略则跳出整个循环&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;continue n ：n表示退到第n层循环，省略则跳过本次循环，进入下一个循环&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;exit n：退出整个shell脚本，n为退出脚本后的状态返回值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;return n：退出当前函数，n为函数的返回值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;测试脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0;i&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5;i++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
 if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; -eq 3 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
    continue&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#break&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#exit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-6&quot;&gt;数组&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;1 2 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
3
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
3
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[0]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; 
1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[1]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[2]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
3
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
1 2 3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# shuzu[3]&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4   &lt;span class=&quot;c&quot;&gt;#添加数组中的成员&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# shuzu[4]&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
1 2 3 4 5
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@CentOS_6 scripts]# &lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;shuzu[4]    &lt;span class=&quot;c&quot;&gt;#删除数组中成员&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;YN&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
curl -I &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &amp;amp;&amp;gt;/dev/null
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is bad&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;http://www.baidu.com http://www.zhaiiker.com http://10.0.0.16&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
  for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0;i&amp;lt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;;i++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do
     &lt;/span&gt;YN &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shuzu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[i]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;sleep 10
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;end&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jan 2017 00:00:00 +0800</pubDate>
        <link>/shell/shell-2.html</link>
        <guid isPermaLink="true">/shell/shell-2.html</guid>
        
        
        <category>Shell</category>
        
      </item>
    
  </channel>
</rss>
